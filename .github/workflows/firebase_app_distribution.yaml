name: Android Firebase App Distribution Workflow

# Trigger this workflow on push or pull requests to the 'development' branch
on:
  pull_request:
    branches:
      - development
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java 17
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # Step 3: Set up Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # Step 4: Create placeholder .env.firebase file
      - name: Create placeholder .env.firebase
        run: echo "FIREBASE_CONFIG_PLACEHOLDER=true" > .env.firebase

      # Step 5: Decode and place google-services.json
      - name: Decode and place google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > android/app/google-services.json

      # Step 6: Set up Firebase service account credentials
      - name: Set up Firebase service account credentials
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > $HOME/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="$HOME/firebase-service-account.json"

      # Step 7: Bump version in pubspec.yaml
      - name: Bump Version
        id: bump-version
        uses: einaregilsson/version-bumper@v2
        with:
          file: pubspec.yaml
          version-type: patch

      # Optional: Verify version bump
      - name: Verify Version Bump
        uses: nick-invision/assert-action@v1
        with:
          expected: ${{ steps.bump-version.outputs.version-number }}
          actual: ${{ steps.bump-version.outputs.version-number }}

      # Step 8: Install project dependencies
      - name: Install Dependencies
        run: flutter pub get

      # Step 9: Clear Flutter build cache
      - name: Clear Flutter Build Cache
        run: flutter clean

      # Step 10: Build the release APK
      - name: Build APK for Production
        run: flutter build apk --release

      # Step 11: Distribute APK to Firebase
      - name: Distribute APK to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.ANDROID_APP_ID }}
          file: build/app/outputs/flutter-apk/app-release.apk
          groups: maintainers
          releaseNotes: "First GitHub Action Firebase Distribution"
          debug: true
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}

      # Step 12: Upload APK as an artifact
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          debug: true
